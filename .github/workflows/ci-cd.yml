name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        ports: ['5432:5432']
        env:
          POSTGRES_DB: spa
          POSTGRES_USER: spa
          POSTGRES_PASSWORD: spa_password
        options: >-
          --health-cmd "pg_isready -U spa" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports: ['6379:6379']
    env:
      POSTGRES_DB: spa
      POSTGRES_USER: spa
      POSTGRES_PASSWORD: spa_password
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      CELERY_BROKER_URL: redis://localhost:6379/0
      CELERY_RESULT_BACKEND: redis://localhost:6379/1
      SECRET_KEY: test-secret
      DEBUG: 'False'
      ALLOWED_HOSTS: localhost
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install -r requirements.txt
      - name: Lint (flake8)
        run: |
          flake8 . --exclude=.venv,venv,.git,__pycache__ --max-line-length=120
      - name: Migrate and test
        run: |
          python manage.py migrate --noinput
          python manage.py test -v 2

  docker-build-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image (check only)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: false

  build-and-deploy:
    if: github.ref == 'refs/heads/main'
    needs: [tests, docker-build-check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/spa_back:latest
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/apps/spa_back
            docker compose pull
            docker compose up -d --remove-orphans


